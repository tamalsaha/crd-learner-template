// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cluster.bytebuilders.dev_clusters.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterBytebuildersDev_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6f\x23\xb7\x0f\xbd\xfb\x53\x10\xf8\x1d\x72\x59\x8f\x11\xfc\x8a\xa2\x98\x5b\xe0\x16\x45\xd0\x7f\xc1\x66\xb1\x77\x8e\x44\xcf\x68\xa3\xa1\x54\x91\x72\x9b\x16\xfd\xee\x85\x34\x33\xf6\xd8\xde\x5d\xe4\xd2\x39\x45\x24\xf5\xf4\xfc\x1e\xc9\x60\x74\x1f\x29\x89\x0b\xdc\x02\x46\x47\x7f\x2a\x71\x39\x49\xf3\xf2\x9d\x34\x2e\xec\x8e\xf7\x9b\x17\xc7\xb6\x85\x7d\x16\x0d\xe3\x7b\x92\x90\x93\xa1\xef\xe9\xe0\xd8\xa9\x0b\xbc\x19\x49\xd1\xa2\x62\xbb\x01\x30\x89\xb0\x04\x3f\xb8\x91\x44\x71\x8c\x2d\x70\xf6\x7e\x03\xe0\xb1\x23\x2f\xa5\x06\x00\x63\x6c\x5e\x72\x47\x89\x49\xa9\xbe\xc2\x38\x52\x0b\xdd\xab\x52\x97\x9d\xb7\x94\x64\x03\x30\x05\x8d\xcf\xa2\x94\xa4\x99\xff\x68\xd6\x55\x8d\xa5\xe3\x46\x22\x99\x02\xdc\xa7\x90\xe3\xe9\xc2\x6d\xdd\x84\x38\x73\x30\xa8\xd4\x87\xe4\x96\xf3\x16\xce\x8c\xe6\x00\xc6\x28\x26\x58\xaa\xc7\x59\x84\x09\xbb\x46\xbc\x13\xfd\x69\x1d\xfd\xd9\x89\xd6\x4c\xf4\x39\xa1\x3f\x53\xaf\x41\x71\xdc\x67\x8f\xe9\x14\xde\x00\x88\x09\x91\x5a\xf8\xb5\xd0\x8a\x68\xc8\x6e\x00\x8e\x93\x1d\x95\xd6\x16\xd0\xda\xaa\x32\xfa\xa7\xe4\x58\x29\xed\x83\xcf\x23\x9f\x48\x7f\x92\xc0\x4f\xa8\x43\x0b\xcd\xe2\x43\x73\x63\x42\xad\x5d\xf4\x7c\xe8\x69\x3e\xeb\x6b\x79\xdc\xa2\x4e\x81\x29\x7d\xbc\x47\x1f\x07\xbc\x9f\x38\x9b\x81\x46\x6c\xe7\xfa\x10\x89\x1f\x9e\x1e\x3f\xfe\xff\xf9\x22\x0c\x10\x53\x88\x94\xf4\xa4\xe5\xf4\xad\x5a\x6b\x15\x05\xb0\x24\x26\xb9\xa8\xb5\xe7\xee\x0a\xe0\x54\x05\xb6\xf4\x14\x09\xe8\x40\x8b\x0a\x64\x67\x0e\x10\x0e\xa0\x83\x13\x48\x14\x13\x09\xb1\xd6\x9f\x78\x01\x0c\xa5\x08\x19\x42\xf7\x89\x8c\x36\xf0\x4c\xa9\xc0\x80\x0c\x21\x7b\x0b\x26\xf0\x91\x92\x42\x22\x13\x7a\x76\x7f\x9d\xb0\x05\x34\xd4\x47\x3d\x2a\xcd\x16\x9e\xbf\xaa\x3a\xa3\x87\x23\xfa\x4c\xef\x00\xd9\xc2\x88\xaf\x90\xa8\xbc\x02\x99\x57\x78\xb5\x44\x1a\xf8\x25\x24\x02\xc7\x87\xd0\xc2\xa0\x1a\xa5\xdd\xed\x7a\xa7\xcb\x48\x99\x30\x8e\x99\x9d\xbe\xee\x4c\x60\x4d\xae\xcb\x1a\x92\xec\x2c\x1d\xc9\xef\xc4\xf5\x5b\x4c\x66\x70\x4a\x46\x73\xa2\x1d\x46\xb7\xad\xd4\x59\xeb\x5c\x8e\xf6\x7f\x69\x1e\x42\xb9\xbb\xe0\x3a\xf9\x29\x9a\x1c\xf7\xab\x44\xed\xdc\xaf\x38\x50\x7a\x18\x9c\x00\xce\x57\xa7\x5f\x71\x16\xba\x84\x8a\x3a\xef\x7f\x78\xfe\x00\xcb\xd3\xd5\x8c\x6b\xf5\xab\xee\xe7\x8b\x72\xb6\xa0\x08\xe6\xf8\x40\x69\x32\xf1\x90\xc2\x58\x31\x89\x6d\x0c\x8e\xb5\x1e\x8c\x77\xc4\xd7\xf2\x4b\xee\x46\xa7\xc5\xf7\xdf\x33\x89\x16\xaf\x1a\xd8\x23\x73\x50\xe8\x08\x72\x2c\xfd\x6b\x1b\x78\x64\xd8\xe3\x48\x7e\x8f\x42\xff\xb9\x01\x45\x69\xd9\x16\x61\xdf\x66\xc1\x7a\x45\x5e\x17\x4f\xaa\xad\x12\xcb\x3a\x3b\x7f\x9f\x9f\xaf\x5a\xeb\xd1\xbc\xec\x07\x64\x26\x7f\x9d\xfb\x22\x1b\xa8\x62\xba\x44\x57\x6d\xb1\xbd\x80\x7b\x13\x55\x45\xcd\xf2\x56\xb2\xa1\x93\xd2\x0e\xf6\x47\x62\x4a\x75\x7c\x6f\x29\x5f\xb4\xe6\x6f\x37\x17\x4a\x9f\x96\x56\x19\x83\xd4\x41\x26\x56\xe8\xcf\xd9\xe5\x85\x1b\x58\x80\x43\x98\x7b\x6f\x5e\xd6\x0d\x3c\x2a\x98\x90\x12\x49\x0c\x6c\x4f\x3b\x60\x4e\xdf\xc9\x0a\xf7\x1d\xfc\x31\x38\x33\x7c\x06\xd5\xc9\xd2\x81\x10\x18\xc6\x3c\x6d\x25\xe8\x5e\x2b\xd6\xc3\xd3\xe3\x3c\x01\xcd\xcd\xdd\x43\x48\x23\x6a\x5b\xd6\xcb\xb7\xdf\x7c\xc1\xb9\xb2\x7a\xfa\xf9\xbf\xcd\x57\x9d\xb8\x09\x4e\x32\xb4\xa0\x29\x4f\xcb\x5d\x34\x24\xec\x69\x1d\xc9\xdd\x69\x8f\x2c\x3e\xcc\x7e\xc2\xdf\xff\x6c\xfe\x0d\x00\x00\xff\xff\xa5\x43\x73\xfa\x19\x08\x00\x00")

func clusterBytebuildersDev_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clustersYaml,
		"cluster.bytebuilders.dev_clusters.yaml",
	)
}

func clusterBytebuildersDev_clustersYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusters.yaml", size: 2073, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.bytebuilders.dev_clusters.yaml": clusterBytebuildersDev_clustersYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.bytebuilders.dev_clusters.yaml": {clusterBytebuildersDev_clustersYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
